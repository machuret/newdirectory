import React, { useState, useEffect } from 'react';
import { MenuItem } from '@/types/menuItem';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; // Assuming you have a Select component

interface MenuItemFormProps {
  menuItem: MenuItem | null;
  onSave: (menuItem: MenuItem) => void;
  onCancel: () => void;
}

const MenuItemForm: React.FC<MenuItemFormProps> = ({ menuItem, onSave, onCancel }) => {
  const [label, setLabel] = useState('');
  const [url, setUrl] = useState('');
  const [menuLocation, setMenuLocation] = useState<'header' | 'footer' | 'sidebar'>('header');
  const [order, setOrder] = useState<number | ''>('');

  useEffect(() => {
    if (menuItem) {
      setLabel(menuItem.label);
      setUrl(menuItem.url);
      setMenuLocation(menuItem.menuLocation);
      setOrder(menuItem.order !== undefined ? menuItem.order : '');
    } else {
      setLabel('');
      setUrl('');
      setMenuLocation('header');
      setOrder('');
    }
  }, [menuItem]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newMenuItem: Partial<MenuItem> = {
      label,
      url,
      menuLocation,
      order: order === '' ? undefined : Number(order),
    };
    if (menuItem && menuItem.id) {
      onSave({ ...menuItem, ...newMenuItem } as MenuItem); // Type assertion needed if ID might be missing from partial
    } else {
      // For new items, ID will be generated by the server, or you could generate a temp one client-side
      onSave(newMenuItem as MenuItem); 
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Label htmlFor="label">Label</Label>
        <Input
          id="label"
          value={label}
          onChange={(e) => setLabel(e.target.value)}
          required
        />
      </div>
      <div>
        <Label htmlFor="url">URL</Label>
        <Input
          id="url"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          required
        />
      </div>
      <div>
        <Label htmlFor="menuLocation">Menu Location</Label>
        <Select value={menuLocation} onValueChange={(value: 'header' | 'footer' | 'sidebar') => setMenuLocation(value)}>
          <SelectTrigger id="menuLocation">
            <SelectValue placeholder="Select location" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="header">Header</SelectItem>
            <SelectItem value="footer">Footer</SelectItem>
            <SelectItem value="sidebar">Sidebar</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div>
        <Label htmlFor="order">Order</Label>
        <Input
          id="order"
          type="number"
          value={order}
          onChange={(e) => setOrder(e.target.value === '' ? '' : parseInt(e.target.value, 10))}
        />
      </div>
      <div className="flex justify-end space-x-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">Save Menu Item</Button>
      </div>
    </form>
  );
};

export default MenuItemForm;
